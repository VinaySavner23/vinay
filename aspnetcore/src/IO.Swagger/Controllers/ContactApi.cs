/*
 * NyoStore
 *
 * This is a NyoStore server. Here you can find  out all the rest api's. 
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContactApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new contact to the store/user
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Invalid input</response>
        /// <response code="409">Conflict</response>
        /// <response code="5XX">Unexpected Error</response>
        [HttpPost]
        [Route("/Developmenttest/NyoStore/2.1/contact")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddContact")]
        [SwaggerResponse(statusCode: 200, type: typeof(Key), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Unauthorized), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Forbidden), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 5XX, type: typeof(Error), description: "Unexpected Error")]
        public virtual IActionResult AddContact([FromBody]Body body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Key));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Unauthorized));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Forbidden));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 5XX or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(5XX, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : \"key\"\n  },\n  \"message\" : \"message\",\n  \"status\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Key>(exampleJson)
                        : default(Key);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get contact by key
        /// </summary>
        /// <remarks>Returns a single contact</remarks>
        /// <param name="key">Key of contact to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Invalid input</response>
        /// <response code="409">Conflict</response>
        /// <response code="5XX">Unexpected Error</response>
        [HttpGet]
        [Route("/Developmenttest/NyoStore/2.1/contact/{key}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetContactByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContactByKey), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Unauthorized), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Forbidden), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 5XX, type: typeof(Error), description: "Unexpected Error")]
        public virtual IActionResult GetContactByKey([FromRoute][Required]string key)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContactByKey));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Unauthorized));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Forbidden));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 5XX or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(5XX, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"contact_person\" : \"contact_person\",\n    \"phone\" : \"phone\",\n    \"contact_id\" : \"contact_id\",\n    \"email\" : \"email\"\n  },\n  \"message\" : \"message\",\n  \"status\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ContactByKey>(exampleJson)
                        : default(ContactByKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update contact email by key
        /// </summary>
        /// <remarks>Update contact name</remarks>
        /// <param name="key">Key of contact to return</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Invalid input</response>
        /// <response code="409">Conflict</response>
        /// <response code="5XX">Unexpected Error</response>
        [HttpPatch]
        [Route("/Developmenttest/NyoStore/2.1/contact/{key}/email")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PatchContactEmailByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(Success), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Unauthorized), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Forbidden), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 5XX, type: typeof(Error), description: "Unexpected Error")]
        public virtual IActionResult PatchContactEmailByKey([FromRoute][Required]string key, [FromBody]Body3 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Success));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Unauthorized));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Forbidden));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 5XX or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(5XX, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"message\",\n  \"status\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Success>(exampleJson)
                        : default(Success);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update contact person by key
        /// </summary>
        /// <remarks>Update contact name</remarks>
        /// <param name="key">Key of contact to return</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Invalid input</response>
        /// <response code="409">Conflict</response>
        /// <response code="5XX">Unexpected Error</response>
        [HttpPatch]
        [Route("/Developmenttest/NyoStore/2.1/contact/{key}/contact_person")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PatchContactPersonByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(Success), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Unauthorized), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Forbidden), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 5XX, type: typeof(Error), description: "Unexpected Error")]
        public virtual IActionResult PatchContactPersonByKey([FromRoute][Required]string key, [FromBody]Body1 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Success));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Unauthorized));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Forbidden));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 5XX or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(5XX, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"message\",\n  \"status\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Success>(exampleJson)
                        : default(Success);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update contact phone by key
        /// </summary>
        /// <remarks>Update contact name</remarks>
        /// <param name="key">Key of contact to return</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="405">Invalid input</response>
        /// <response code="409">Conflict</response>
        /// <response code="5XX">Unexpected Error</response>
        [HttpPatch]
        [Route("/Developmenttest/NyoStore/2.1/contact/{key}/phone")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PatchContactPhoneByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(Success), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Unauthorized), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Forbidden), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 405, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 409, type: typeof(Error), description: "Conflict")]
        [SwaggerResponse(statusCode: 5XX, type: typeof(Error), description: "Unexpected Error")]
        public virtual IActionResult PatchContactPhoneByKey([FromRoute][Required]string key, [FromBody]Body2 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Success));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Unauthorized));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Forbidden));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405, default(Error));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(Error));

            //TODO: Uncomment the next line to return response 5XX or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(5XX, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"message\" : \"message\",\n  \"status\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Success>(exampleJson)
                        : default(Success);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
