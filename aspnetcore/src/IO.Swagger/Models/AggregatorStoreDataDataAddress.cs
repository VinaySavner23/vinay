/*
 * NyoStore
 *
 * This is a NyoStore server. Here you can find  out all the rest api's. 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AggregatorStoreDataDataAddress : IEquatable<AggregatorStoreDataDataAddress>
    { 
        /// <summary>
        /// Gets or Sets AddressId
        /// </summary>
        [DataMember(Name="address_id")]
        public string AddressId { get; set; }

        /// <summary>
        /// Gets or Sets Addr1
        /// </summary>
        [DataMember(Name="addr1")]
        public string Addr1 { get; set; }

        /// <summary>
        /// Gets or Sets Addr2
        /// </summary>
        [DataMember(Name="addr2")]
        public string Addr2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        [DataMember(Name="zipcode")]
        public string Zipcode { get; set; }

        /// <summary>
        /// Gets or Sets Geog
        /// </summary>
        [DataMember(Name="geog")]
        public AggregatorStoreDataDataAddressGeog Geog { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted")]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>
        [DataMember(Name="address_type")]
        public string AddressType { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact")]
        public ContactByKeyData Contact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregatorStoreDataDataAddress {\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  Addr1: ").Append(Addr1).Append("\n");
            sb.Append("  Addr2: ").Append(Addr2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  Geog: ").Append(Geog).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AggregatorStoreDataDataAddress)obj);
        }

        /// <summary>
        /// Returns true if AggregatorStoreDataDataAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of AggregatorStoreDataDataAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatorStoreDataDataAddress other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressId == other.AddressId ||
                    AddressId != null &&
                    AddressId.Equals(other.AddressId)
                ) && 
                (
                    Addr1 == other.Addr1 ||
                    Addr1 != null &&
                    Addr1.Equals(other.Addr1)
                ) && 
                (
                    Addr2 == other.Addr2 ||
                    Addr2 != null &&
                    Addr2.Equals(other.Addr2)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Zipcode == other.Zipcode ||
                    Zipcode != null &&
                    Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    Geog == other.Geog ||
                    Geog != null &&
                    Geog.Equals(other.Geog)
                ) && 
                (
                    Deleted == other.Deleted ||
                    Deleted != null &&
                    Deleted.Equals(other.Deleted)
                ) && 
                (
                    AddressType == other.AddressType ||
                    AddressType != null &&
                    AddressType.Equals(other.AddressType)
                ) && 
                (
                    Contact == other.Contact ||
                    Contact != null &&
                    Contact.Equals(other.Contact)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddressId != null)
                    hashCode = hashCode * 59 + AddressId.GetHashCode();
                    if (Addr1 != null)
                    hashCode = hashCode * 59 + Addr1.GetHashCode();
                    if (Addr2 != null)
                    hashCode = hashCode * 59 + Addr2.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Zipcode != null)
                    hashCode = hashCode * 59 + Zipcode.GetHashCode();
                    if (Geog != null)
                    hashCode = hashCode * 59 + Geog.GetHashCode();
                    if (Deleted != null)
                    hashCode = hashCode * 59 + Deleted.GetHashCode();
                    if (AddressType != null)
                    hashCode = hashCode * 59 + AddressType.GetHashCode();
                    if (Contact != null)
                    hashCode = hashCode * 59 + Contact.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AggregatorStoreDataDataAddress left, AggregatorStoreDataDataAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AggregatorStoreDataDataAddress left, AggregatorStoreDataDataAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
