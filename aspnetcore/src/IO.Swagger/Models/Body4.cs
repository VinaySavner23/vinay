/*
 * NyoStore
 *
 * This is a NyoStore server. Here you can find  out all the rest api's. 
 *
 * OpenAPI spec version: 2.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Body4 : IEquatable<Body4>
    { 
        /// <summary>
        /// Id of contact person
        /// </summary>
        /// <value>Id of contact person</value>
        [DataMember(Name="contact_id")]
        public string ContactId { get; set; }

        /// <summary>
        /// First address of contact person
        /// </summary>
        /// <value>First address of contact person</value>
        [DataMember(Name="addr1")]
        public string Addr1 { get; set; }

        /// <summary>
        /// Second address of contact person
        /// </summary>
        /// <value>Second address of contact person</value>
        [DataMember(Name="addr2")]
        public string Addr2 { get; set; }

        /// <summary>
        /// City of contact person
        /// </summary>
        /// <value>City of contact person</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// State of contact person
        /// </summary>
        /// <value>State of contact person</value>
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// cCountry of contact person
        /// </summary>
        /// <value>cCountry of contact person</value>
        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// Latitude of contact person
        /// </summary>
        /// <value>Latitude of contact person</value>
        [DataMember(Name="latitude")]
        public string Latitude { get; set; }

        /// <summary>
        /// Latitude of contact person
        /// </summary>
        /// <value>Latitude of contact person</value>
        [DataMember(Name="longitude")]
        public string Longitude { get; set; }

        /// <summary>
        /// Zipcode of contact person
        /// </summary>
        /// <value>Zipcode of contact person</value>
        [DataMember(Name="zipcode")]
        public string Zipcode { get; set; }

        /// <summary>
        /// Address type of contact person
        /// </summary>
        /// <value>Address type of contact person</value>
        [DataMember(Name="address_type")]
        public string AddressType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body4 {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Addr1: ").Append(Addr1).Append("\n");
            sb.Append("  Addr2: ").Append(Addr2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Body4)obj);
        }

        /// <summary>
        /// Returns true if Body4 instances are equal
        /// </summary>
        /// <param name="other">Instance of Body4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body4 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactId == other.ContactId ||
                    ContactId != null &&
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    Addr1 == other.Addr1 ||
                    Addr1 != null &&
                    Addr1.Equals(other.Addr1)
                ) && 
                (
                    Addr2 == other.Addr2 ||
                    Addr2 != null &&
                    Addr2.Equals(other.Addr2)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Latitude == other.Latitude ||
                    Latitude != null &&
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    Longitude != null &&
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    Zipcode == other.Zipcode ||
                    Zipcode != null &&
                    Zipcode.Equals(other.Zipcode)
                ) && 
                (
                    AddressType == other.AddressType ||
                    AddressType != null &&
                    AddressType.Equals(other.AddressType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    if (Addr1 != null)
                    hashCode = hashCode * 59 + Addr1.GetHashCode();
                    if (Addr2 != null)
                    hashCode = hashCode * 59 + Addr2.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Latitude != null)
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    if (Longitude != null)
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (Zipcode != null)
                    hashCode = hashCode * 59 + Zipcode.GetHashCode();
                    if (AddressType != null)
                    hashCode = hashCode * 59 + AddressType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Body4 left, Body4 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Body4 left, Body4 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
