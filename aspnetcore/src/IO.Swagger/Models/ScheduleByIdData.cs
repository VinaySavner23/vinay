/*
 * NyoStore
 *
 * This is a NyoStore server. Here you can find  out all the rest api's. 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ScheduleByIdData : IEquatable<ScheduleByIdData>
    { 
        /// <summary>
        /// Gets or Sets ScheduleId
        /// </summary>
        [DataMember(Name="schedule_id")]
        public string ScheduleId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [DataMember(Name="policy_id")]
        public string PolicyId { get; set; }

        /// <summary>
        /// Gets or Sets Timeslots
        /// </summary>
        [DataMember(Name="timeslots")]
        public string Timeslots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleByIdData {\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  Timeslots: ").Append(Timeslots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScheduleByIdData)obj);
        }

        /// <summary>
        /// Returns true if ScheduleByIdData instances are equal
        /// </summary>
        /// <param name="other">Instance of ScheduleByIdData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleByIdData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ScheduleId == other.ScheduleId ||
                    ScheduleId != null &&
                    ScheduleId.Equals(other.ScheduleId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Timezone == other.Timezone ||
                    Timezone != null &&
                    Timezone.Equals(other.Timezone)
                ) && 
                (
                    PolicyId == other.PolicyId ||
                    PolicyId != null &&
                    PolicyId.Equals(other.PolicyId)
                ) && 
                (
                    Timeslots == other.Timeslots ||
                    Timeslots != null &&
                    Timeslots.Equals(other.Timeslots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ScheduleId != null)
                    hashCode = hashCode * 59 + ScheduleId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Timezone != null)
                    hashCode = hashCode * 59 + Timezone.GetHashCode();
                    if (PolicyId != null)
                    hashCode = hashCode * 59 + PolicyId.GetHashCode();
                    if (Timeslots != null)
                    hashCode = hashCode * 59 + Timeslots.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScheduleByIdData left, ScheduleByIdData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScheduleByIdData left, ScheduleByIdData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
