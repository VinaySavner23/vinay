/*
 * NyoStore
 *
 * This is a NyoStore server. Here you can find  out all the rest api's. 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AggregatorStoreBranchDataData : IEquatable<AggregatorStoreBranchDataData>
    { 
        /// <summary>
        /// Gets or Sets BranchId
        /// </summary>
        [DataMember(Name="branch_id")]
        public string BranchId { get; set; }

        /// <summary>
        /// Gets or Sets BranchIdCustom
        /// </summary>
        [DataMember(Name="branch_id_custom")]
        public string BranchIdCustom { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address")]
        public AggregatorStoreDataDataAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule")]
        public ScheduleByIdData Schedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregatorStoreBranchDataData {\n");
            sb.Append("  BranchId: ").Append(BranchId).Append("\n");
            sb.Append("  BranchIdCustom: ").Append(BranchIdCustom).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AggregatorStoreBranchDataData)obj);
        }

        /// <summary>
        /// Returns true if AggregatorStoreBranchDataData instances are equal
        /// </summary>
        /// <param name="other">Instance of AggregatorStoreBranchDataData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatorStoreBranchDataData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BranchId == other.BranchId ||
                    BranchId != null &&
                    BranchId.Equals(other.BranchId)
                ) && 
                (
                    BranchIdCustom == other.BranchIdCustom ||
                    BranchIdCustom != null &&
                    BranchIdCustom.Equals(other.BranchIdCustom)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Schedule == other.Schedule ||
                    Schedule != null &&
                    Schedule.Equals(other.Schedule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BranchId != null)
                    hashCode = hashCode * 59 + BranchId.GetHashCode();
                    if (BranchIdCustom != null)
                    hashCode = hashCode * 59 + BranchIdCustom.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Schedule != null)
                    hashCode = hashCode * 59 + Schedule.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AggregatorStoreBranchDataData left, AggregatorStoreBranchDataData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AggregatorStoreBranchDataData left, AggregatorStoreBranchDataData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
